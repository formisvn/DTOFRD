'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8936
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Dulieu"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Dulieu
    Inherits Global.System.Data.DataSet
    
    Private tableTruong As TruongDataTable
    
    Private tablehuyen As huyenDataTable
    
    Private tablexa As xaDataTable
    
    Private tableTinh As TinhDataTable
    
    Private tableDatasharing As DatasharingDataTable
    
    Private tableThongtin As ThongtinDataTable
    
    Private tablelang_en As lang_enDataTable
    
    Private tablelang_vi As lang_viDataTable
    
    Private tabletochuc As tochucDataTable
    
    Private tabletaive_en As taive_enDataTable
    
    Private tabletaive_vi As taive_viDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Truong")) Is Nothing) Then
                MyBase.Tables.Add(New TruongDataTable(ds.Tables("Truong")))
            End If
            If (Not (ds.Tables("Huyen")) Is Nothing) Then
                MyBase.Tables.Add(New huyenDataTable(ds.Tables("Huyen")))
            End If
            If (Not (ds.Tables("Xa")) Is Nothing) Then
                MyBase.Tables.Add(New xaDataTable(ds.Tables("Xa")))
            End If
            If (Not (ds.Tables("Tinh")) Is Nothing) Then
                MyBase.Tables.Add(New TinhDataTable(ds.Tables("Tinh")))
            End If
            If (Not (ds.Tables("Datasharing")) Is Nothing) Then
                MyBase.Tables.Add(New DatasharingDataTable(ds.Tables("Datasharing")))
            End If
            If (Not (ds.Tables("Thongtin")) Is Nothing) Then
                MyBase.Tables.Add(New ThongtinDataTable(ds.Tables("Thongtin")))
            End If
            If (Not (ds.Tables("lang_en")) Is Nothing) Then
                MyBase.Tables.Add(New lang_enDataTable(ds.Tables("lang_en")))
            End If
            If (Not (ds.Tables("lang_vi")) Is Nothing) Then
                MyBase.Tables.Add(New lang_viDataTable(ds.Tables("lang_vi")))
            End If
            If (Not (ds.Tables("tochuc")) Is Nothing) Then
                MyBase.Tables.Add(New tochucDataTable(ds.Tables("tochuc")))
            End If
            If (Not (ds.Tables("taive_en")) Is Nothing) Then
                MyBase.Tables.Add(New taive_enDataTable(ds.Tables("taive_en")))
            End If
            If (Not (ds.Tables("taive_vi")) Is Nothing) Then
                MyBase.Tables.Add(New taive_viDataTable(ds.Tables("taive_vi")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Truong() As TruongDataTable
        Get
            Return Me.tableTruong
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property huyen() As huyenDataTable
        Get
            Return Me.tablehuyen
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property xa() As xaDataTable
        Get
            Return Me.tablexa
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tinh() As TinhDataTable
        Get
            Return Me.tableTinh
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Datasharing() As DatasharingDataTable
        Get
            Return Me.tableDatasharing
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Thongtin() As ThongtinDataTable
        Get
            Return Me.tableThongtin
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property lang_en() As lang_enDataTable
        Get
            Return Me.tablelang_en
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property lang_vi() As lang_viDataTable
        Get
            Return Me.tablelang_vi
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tochuc() As tochucDataTable
        Get
            Return Me.tabletochuc
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property taive_en() As taive_enDataTable
        Get
            Return Me.tabletaive_en
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property taive_vi() As taive_viDataTable
        Get
            Return Me.tabletaive_vi
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Dulieu = CType(MyBase.Clone,Dulieu)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Truong")) Is Nothing) Then
                MyBase.Tables.Add(New TruongDataTable(ds.Tables("Truong")))
            End If
            If (Not (ds.Tables("Huyen")) Is Nothing) Then
                MyBase.Tables.Add(New huyenDataTable(ds.Tables("Huyen")))
            End If
            If (Not (ds.Tables("Xa")) Is Nothing) Then
                MyBase.Tables.Add(New xaDataTable(ds.Tables("Xa")))
            End If
            If (Not (ds.Tables("Tinh")) Is Nothing) Then
                MyBase.Tables.Add(New TinhDataTable(ds.Tables("Tinh")))
            End If
            If (Not (ds.Tables("Datasharing")) Is Nothing) Then
                MyBase.Tables.Add(New DatasharingDataTable(ds.Tables("Datasharing")))
            End If
            If (Not (ds.Tables("Thongtin")) Is Nothing) Then
                MyBase.Tables.Add(New ThongtinDataTable(ds.Tables("Thongtin")))
            End If
            If (Not (ds.Tables("lang_en")) Is Nothing) Then
                MyBase.Tables.Add(New lang_enDataTable(ds.Tables("lang_en")))
            End If
            If (Not (ds.Tables("lang_vi")) Is Nothing) Then
                MyBase.Tables.Add(New lang_viDataTable(ds.Tables("lang_vi")))
            End If
            If (Not (ds.Tables("tochuc")) Is Nothing) Then
                MyBase.Tables.Add(New tochucDataTable(ds.Tables("tochuc")))
            End If
            If (Not (ds.Tables("taive_en")) Is Nothing) Then
                MyBase.Tables.Add(New taive_enDataTable(ds.Tables("taive_en")))
            End If
            If (Not (ds.Tables("taive_vi")) Is Nothing) Then
                MyBase.Tables.Add(New taive_viDataTable(ds.Tables("taive_vi")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableTruong = CType(MyBase.Tables("Truong"),TruongDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTruong) Is Nothing) Then
                Me.tableTruong.InitVars
            End If
        End If
        Me.tablehuyen = CType(MyBase.Tables("Huyen"),huyenDataTable)
        If (initTable = true) Then
            If (Not (Me.tablehuyen) Is Nothing) Then
                Me.tablehuyen.InitVars
            End If
        End If
        Me.tablexa = CType(MyBase.Tables("Xa"),xaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablexa) Is Nothing) Then
                Me.tablexa.InitVars
            End If
        End If
        Me.tableTinh = CType(MyBase.Tables("Tinh"),TinhDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTinh) Is Nothing) Then
                Me.tableTinh.InitVars
            End If
        End If
        Me.tableDatasharing = CType(MyBase.Tables("Datasharing"),DatasharingDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDatasharing) Is Nothing) Then
                Me.tableDatasharing.InitVars
            End If
        End If
        Me.tableThongtin = CType(MyBase.Tables("Thongtin"),ThongtinDataTable)
        If (initTable = true) Then
            If (Not (Me.tableThongtin) Is Nothing) Then
                Me.tableThongtin.InitVars
            End If
        End If
        Me.tablelang_en = CType(MyBase.Tables("lang_en"),lang_enDataTable)
        If (initTable = true) Then
            If (Not (Me.tablelang_en) Is Nothing) Then
                Me.tablelang_en.InitVars
            End If
        End If
        Me.tablelang_vi = CType(MyBase.Tables("lang_vi"),lang_viDataTable)
        If (initTable = true) Then
            If (Not (Me.tablelang_vi) Is Nothing) Then
                Me.tablelang_vi.InitVars
            End If
        End If
        Me.tabletochuc = CType(MyBase.Tables("tochuc"),tochucDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletochuc) Is Nothing) Then
                Me.tabletochuc.InitVars
            End If
        End If
        Me.tabletaive_en = CType(MyBase.Tables("taive_en"),taive_enDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletaive_en) Is Nothing) Then
                Me.tabletaive_en.InitVars
            End If
        End If
        Me.tabletaive_vi = CType(MyBase.Tables("taive_vi"),taive_viDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletaive_vi) Is Nothing) Then
                Me.tabletaive_vi.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Dulieu"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Dulieu.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableTruong = New TruongDataTable
        MyBase.Tables.Add(Me.tableTruong)
        Me.tablehuyen = New huyenDataTable
        MyBase.Tables.Add(Me.tablehuyen)
        Me.tablexa = New xaDataTable
        MyBase.Tables.Add(Me.tablexa)
        Me.tableTinh = New TinhDataTable
        MyBase.Tables.Add(Me.tableTinh)
        Me.tableDatasharing = New DatasharingDataTable
        MyBase.Tables.Add(Me.tableDatasharing)
        Me.tableThongtin = New ThongtinDataTable
        MyBase.Tables.Add(Me.tableThongtin)
        Me.tablelang_en = New lang_enDataTable
        MyBase.Tables.Add(Me.tablelang_en)
        Me.tablelang_vi = New lang_viDataTable
        MyBase.Tables.Add(Me.tablelang_vi)
        Me.tabletochuc = New tochucDataTable
        MyBase.Tables.Add(Me.tabletochuc)
        Me.tabletaive_en = New taive_enDataTable
        MyBase.Tables.Add(Me.tabletaive_en)
        Me.tabletaive_vi = New taive_viDataTable
        MyBase.Tables.Add(Me.tabletaive_vi)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTruong() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializehuyen() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializexa() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTinh() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDatasharing() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeThongtin() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializelang_en() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializelang_vi() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetochuc() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetaive_en() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetaive_vi() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Dulieu = New Dulieu
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub TruongRowChangeEventHandler(ByVal sender As Object, ByVal e As TruongRowChangeEvent)
    
    Public Delegate Sub huyenRowChangeEventHandler(ByVal sender As Object, ByVal e As huyenRowChangeEvent)
    
    Public Delegate Sub xaRowChangeEventHandler(ByVal sender As Object, ByVal e As xaRowChangeEvent)
    
    Public Delegate Sub TinhRowChangeEventHandler(ByVal sender As Object, ByVal e As TinhRowChangeEvent)
    
    Public Delegate Sub DatasharingRowChangeEventHandler(ByVal sender As Object, ByVal e As DatasharingRowChangeEvent)
    
    Public Delegate Sub ThongtinRowChangeEventHandler(ByVal sender As Object, ByVal e As ThongtinRowChangeEvent)
    
    Public Delegate Sub lang_enRowChangeEventHandler(ByVal sender As Object, ByVal e As lang_enRowChangeEvent)
    
    Public Delegate Sub lang_viRowChangeEventHandler(ByVal sender As Object, ByVal e As lang_viRowChangeEvent)
    
    Public Delegate Sub tochucRowChangeEventHandler(ByVal sender As Object, ByVal e As tochucRowChangeEvent)
    
    Public Delegate Sub taive_enRowChangeEventHandler(ByVal sender As Object, ByVal e As taive_enRowChangeEvent)
    
    Public Delegate Sub taive_viRowChangeEventHandler(ByVal sender As Object, ByVal e As taive_viRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TruongDataTable
        Inherits Global.System.Data.TypedTableBase(Of TruongRow)
        
        Private columncolumn_name As Global.System.Data.DataColumn
        
        Private columncolumn_name_vi As Global.System.Data.DataColumn
        
        Private columncolumn_name_en As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Truong"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property column_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncolumn_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property column_name_viColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncolumn_name_vi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property column_name_enColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncolumn_name_en
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TruongRow
            Get
                Return CType(Me.Rows(index),TruongRow)
            End Get
        End Property
        
        Public Event TruongRowChanging As TruongRowChangeEventHandler
        
        Public Event TruongRowChanged As TruongRowChangeEventHandler
        
        Public Event TruongRowDeleting As TruongRowChangeEventHandler
        
        Public Event TruongRowDeleted As TruongRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTruongRow(ByVal row As TruongRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTruongRow(ByVal column_name As String, ByVal column_name_vi As String, ByVal column_name_en As String) As TruongRow
            Dim rowTruongRow As TruongRow = CType(Me.NewRow,TruongRow)
            Dim columnValuesArray() As Object = New Object() {column_name, column_name_vi, column_name_en}
            rowTruongRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTruongRow)
            Return rowTruongRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TruongDataTable = CType(MyBase.Clone,TruongDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TruongDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncolumn_name = MyBase.Columns("column_name")
            Me.columncolumn_name_vi = MyBase.Columns("column_name_vi")
            Me.columncolumn_name_en = MyBase.Columns("column_name_en")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncolumn_name = New Global.System.Data.DataColumn("column_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolumn_name)
            Me.columncolumn_name_vi = New Global.System.Data.DataColumn("column_name_vi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolumn_name_vi)
            Me.columncolumn_name_en = New Global.System.Data.DataColumn("column_name_en", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncolumn_name_en)
            Me.columncolumn_name_vi.Caption = "column_name_vn"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTruongRow() As TruongRow
            Return CType(Me.NewRow,TruongRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TruongRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TruongRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TruongRowChangedEvent) Is Nothing) Then
                RaiseEvent TruongRowChanged(Me, New TruongRowChangeEvent(CType(e.Row,TruongRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TruongRowChangingEvent) Is Nothing) Then
                RaiseEvent TruongRowChanging(Me, New TruongRowChangeEvent(CType(e.Row,TruongRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TruongRowDeletedEvent) Is Nothing) Then
                RaiseEvent TruongRowDeleted(Me, New TruongRowChangeEvent(CType(e.Row,TruongRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TruongRowDeletingEvent) Is Nothing) Then
                RaiseEvent TruongRowDeleting(Me, New TruongRowChangeEvent(CType(e.Row,TruongRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTruongRow(ByVal row As TruongRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Dulieu = New Dulieu
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TruongDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class huyenDataTable
        Inherits Global.System.Data.TypedTableBase(Of huyenRow)
        
        Private columnmatinh As Global.System.Data.DataColumn
        
        Private columnmahuyen As Global.System.Data.DataColumn
        
        Private columntenhuyen As Global.System.Data.DataColumn
        
        Private columntenhuyen_en As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Huyen"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property matinhColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmatinh
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mahuyenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmahuyen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tenhuyenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntenhuyen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tenhuyen_enColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntenhuyen_en
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As huyenRow
            Get
                Return CType(Me.Rows(index),huyenRow)
            End Get
        End Property
        
        Public Event huyenRowChanging As huyenRowChangeEventHandler
        
        Public Event huyenRowChanged As huyenRowChangeEventHandler
        
        Public Event huyenRowDeleting As huyenRowChangeEventHandler
        
        Public Event huyenRowDeleted As huyenRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddhuyenRow(ByVal row As huyenRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddhuyenRow(ByVal matinh As String, ByVal mahuyen As String, ByVal tenhuyen As String, ByVal tenhuyen_en As String) As huyenRow
            Dim rowhuyenRow As huyenRow = CType(Me.NewRow,huyenRow)
            Dim columnValuesArray() As Object = New Object() {matinh, mahuyen, tenhuyen, tenhuyen_en}
            rowhuyenRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowhuyenRow)
            Return rowhuyenRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As huyenDataTable = CType(MyBase.Clone,huyenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New huyenDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnmatinh = MyBase.Columns("matinh")
            Me.columnmahuyen = MyBase.Columns("mahuyen")
            Me.columntenhuyen = MyBase.Columns("tenhuyen")
            Me.columntenhuyen_en = MyBase.Columns("tenhuyen_en")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnmatinh = New Global.System.Data.DataColumn("matinh", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmatinh)
            Me.columnmahuyen = New Global.System.Data.DataColumn("mahuyen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmahuyen)
            Me.columntenhuyen = New Global.System.Data.DataColumn("tenhuyen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntenhuyen)
            Me.columntenhuyen_en = New Global.System.Data.DataColumn("tenhuyen_en", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntenhuyen_en)
            Me.columntenhuyen_en.DefaultValue = CType("",String)
            Me.ExtendedProperties.Add("Generator_RowClassName", "huyenRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "huyenRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "huyenRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_TableClassName", "huyenDataTable")
            Me.ExtendedProperties.Add("Generator_TablePropName", "huyen")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tablehuyen")
            Me.ExtendedProperties.Add("Generator_UserTableName", "Huyen")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewhuyenRow() As huyenRow
            Return CType(Me.NewRow,huyenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New huyenRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(huyenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.huyenRowChangedEvent) Is Nothing) Then
                RaiseEvent huyenRowChanged(Me, New huyenRowChangeEvent(CType(e.Row,huyenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.huyenRowChangingEvent) Is Nothing) Then
                RaiseEvent huyenRowChanging(Me, New huyenRowChangeEvent(CType(e.Row,huyenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.huyenRowDeletedEvent) Is Nothing) Then
                RaiseEvent huyenRowDeleted(Me, New huyenRowChangeEvent(CType(e.Row,huyenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.huyenRowDeletingEvent) Is Nothing) Then
                RaiseEvent huyenRowDeleting(Me, New huyenRowChangeEvent(CType(e.Row,huyenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovehuyenRow(ByVal row As huyenRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Dulieu = New Dulieu
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "huyenDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class xaDataTable
        Inherits Global.System.Data.TypedTableBase(Of xaRow)
        
        Private columnmahuyen As Global.System.Data.DataColumn
        
        Private columnmaxa As Global.System.Data.DataColumn
        
        Private columntenxa As Global.System.Data.DataColumn
        
        Private columntenxa_en As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Xa"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mahuyenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmahuyen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property maxaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmaxa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tenxaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntenxa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tenxa_enColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntenxa_en
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As xaRow
            Get
                Return CType(Me.Rows(index),xaRow)
            End Get
        End Property
        
        Public Event xaRowChanging As xaRowChangeEventHandler
        
        Public Event xaRowChanged As xaRowChangeEventHandler
        
        Public Event xaRowDeleting As xaRowChangeEventHandler
        
        Public Event xaRowDeleted As xaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddxaRow(ByVal row As xaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddxaRow(ByVal mahuyen As String, ByVal maxa As String, ByVal tenxa As String, ByVal tenxa_en As String) As xaRow
            Dim rowxaRow As xaRow = CType(Me.NewRow,xaRow)
            Dim columnValuesArray() As Object = New Object() {mahuyen, maxa, tenxa, tenxa_en}
            rowxaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowxaRow)
            Return rowxaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As xaDataTable = CType(MyBase.Clone,xaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New xaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnmahuyen = MyBase.Columns("mahuyen")
            Me.columnmaxa = MyBase.Columns("maxa")
            Me.columntenxa = MyBase.Columns("tenxa")
            Me.columntenxa_en = MyBase.Columns("tenxa_en")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnmahuyen = New Global.System.Data.DataColumn("mahuyen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmahuyen)
            Me.columnmaxa = New Global.System.Data.DataColumn("maxa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmaxa)
            Me.columntenxa = New Global.System.Data.DataColumn("tenxa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntenxa)
            Me.columntenxa_en = New Global.System.Data.DataColumn("tenxa_en", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntenxa_en)
            Me.ExtendedProperties.Add("Generator_RowClassName", "xaRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "xaRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "xaRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_TableClassName", "xaDataTable")
            Me.ExtendedProperties.Add("Generator_TablePropName", "xa")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tablexa")
            Me.ExtendedProperties.Add("Generator_UserTableName", "Xa")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewxaRow() As xaRow
            Return CType(Me.NewRow,xaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New xaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(xaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.xaRowChangedEvent) Is Nothing) Then
                RaiseEvent xaRowChanged(Me, New xaRowChangeEvent(CType(e.Row,xaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.xaRowChangingEvent) Is Nothing) Then
                RaiseEvent xaRowChanging(Me, New xaRowChangeEvent(CType(e.Row,xaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.xaRowDeletedEvent) Is Nothing) Then
                RaiseEvent xaRowDeleted(Me, New xaRowChangeEvent(CType(e.Row,xaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.xaRowDeletingEvent) Is Nothing) Then
                RaiseEvent xaRowDeleting(Me, New xaRowChangeEvent(CType(e.Row,xaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovexaRow(ByVal row As xaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Dulieu = New Dulieu
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "xaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TinhDataTable
        Inherits Global.System.Data.TypedTableBase(Of TinhRow)
        
        Private columnmatinh As Global.System.Data.DataColumn
        
        Private columntentinh As Global.System.Data.DataColumn
        
        Private columntentinh_en As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Tinh"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property matinhColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmatinh
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tentinhColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntentinh
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tentinh_enColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntentinh_en
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TinhRow
            Get
                Return CType(Me.Rows(index),TinhRow)
            End Get
        End Property
        
        Public Event TinhRowChanging As TinhRowChangeEventHandler
        
        Public Event TinhRowChanged As TinhRowChangeEventHandler
        
        Public Event TinhRowDeleting As TinhRowChangeEventHandler
        
        Public Event TinhRowDeleted As TinhRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTinhRow(ByVal row As TinhRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTinhRow(ByVal matinh As String, ByVal tentinh As String, ByVal tentinh_en As String) As TinhRow
            Dim rowTinhRow As TinhRow = CType(Me.NewRow,TinhRow)
            Dim columnValuesArray() As Object = New Object() {matinh, tentinh, tentinh_en}
            rowTinhRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTinhRow)
            Return rowTinhRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TinhDataTable = CType(MyBase.Clone,TinhDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TinhDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnmatinh = MyBase.Columns("matinh")
            Me.columntentinh = MyBase.Columns("tentinh")
            Me.columntentinh_en = MyBase.Columns("tentinh_en")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnmatinh = New Global.System.Data.DataColumn("matinh", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmatinh)
            Me.columntentinh = New Global.System.Data.DataColumn("tentinh", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntentinh)
            Me.columntentinh_en = New Global.System.Data.DataColumn("tentinh_en", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntentinh_en)
            Me.columntentinh_en.DefaultValue = CType("",String)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTinhRow() As TinhRow
            Return CType(Me.NewRow,TinhRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TinhRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TinhRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TinhRowChangedEvent) Is Nothing) Then
                RaiseEvent TinhRowChanged(Me, New TinhRowChangeEvent(CType(e.Row,TinhRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TinhRowChangingEvent) Is Nothing) Then
                RaiseEvent TinhRowChanging(Me, New TinhRowChangeEvent(CType(e.Row,TinhRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TinhRowDeletedEvent) Is Nothing) Then
                RaiseEvent TinhRowDeleted(Me, New TinhRowChangeEvent(CType(e.Row,TinhRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TinhRowDeletingEvent) Is Nothing) Then
                RaiseEvent TinhRowDeleting(Me, New TinhRowChangeEvent(CType(e.Row,TinhRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTinhRow(ByVal row As TinhRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Dulieu = New Dulieu
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TinhDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DatasharingDataTable
        Inherits Global.System.Data.TypedTableBase(Of DatasharingRow)
        
        Private columnmadt As Global.System.Data.DataColumn
        
        Private columntendt_vi As Global.System.Data.DataColumn
        
        Private columntendt_en As Global.System.Data.DataColumn
        
        Private columngeoservername As Global.System.Data.DataColumn
        
        Private columnchiso As Global.System.Data.DataColumn
        
        Private columntinh As Global.System.Data.DataColumn
        
        Private columnhuyen As Global.System.Data.DataColumn
        
        Private columnxa As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Datasharing"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property madtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmadt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tendt_viColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntendt_vi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tendt_enColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntendt_en
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property geoservernameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngeoservername
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property chisoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnchiso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tinhColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntinh
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property huyenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhuyen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property xaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnxa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DatasharingRow
            Get
                Return CType(Me.Rows(index),DatasharingRow)
            End Get
        End Property
        
        Public Event DatasharingRowChanging As DatasharingRowChangeEventHandler
        
        Public Event DatasharingRowChanged As DatasharingRowChangeEventHandler
        
        Public Event DatasharingRowDeleting As DatasharingRowChangeEventHandler
        
        Public Event DatasharingRowDeleted As DatasharingRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDatasharingRow(ByVal row As DatasharingRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDatasharingRow(ByVal madt As String, ByVal tendt_vi As String, ByVal tendt_en As String, ByVal geoservername As String, ByVal chiso As String, ByVal tinh As String, ByVal huyen As String, ByVal xa As String) As DatasharingRow
            Dim rowDatasharingRow As DatasharingRow = CType(Me.NewRow,DatasharingRow)
            Dim columnValuesArray() As Object = New Object() {madt, tendt_vi, tendt_en, geoservername, chiso, tinh, huyen, xa}
            rowDatasharingRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDatasharingRow)
            Return rowDatasharingRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DatasharingDataTable = CType(MyBase.Clone,DatasharingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DatasharingDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnmadt = MyBase.Columns("madt")
            Me.columntendt_vi = MyBase.Columns("tendt_vi")
            Me.columntendt_en = MyBase.Columns("tendt_en")
            Me.columngeoservername = MyBase.Columns("geoservername")
            Me.columnchiso = MyBase.Columns("chiso")
            Me.columntinh = MyBase.Columns("tinh")
            Me.columnhuyen = MyBase.Columns("huyen")
            Me.columnxa = MyBase.Columns("xa")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnmadt = New Global.System.Data.DataColumn("madt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmadt)
            Me.columntendt_vi = New Global.System.Data.DataColumn("tendt_vi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntendt_vi)
            Me.columntendt_en = New Global.System.Data.DataColumn("tendt_en", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntendt_en)
            Me.columngeoservername = New Global.System.Data.DataColumn("geoservername", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngeoservername)
            Me.columnchiso = New Global.System.Data.DataColumn("chiso", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnchiso)
            Me.columntinh = New Global.System.Data.DataColumn("tinh", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntinh)
            Me.columnhuyen = New Global.System.Data.DataColumn("huyen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhuyen)
            Me.columnxa = New Global.System.Data.DataColumn("xa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnxa)
            Me.columntendt_vi.Caption = "tendt"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDatasharingRow() As DatasharingRow
            Return CType(Me.NewRow,DatasharingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DatasharingRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DatasharingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DatasharingRowChangedEvent) Is Nothing) Then
                RaiseEvent DatasharingRowChanged(Me, New DatasharingRowChangeEvent(CType(e.Row,DatasharingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DatasharingRowChangingEvent) Is Nothing) Then
                RaiseEvent DatasharingRowChanging(Me, New DatasharingRowChangeEvent(CType(e.Row,DatasharingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DatasharingRowDeletedEvent) Is Nothing) Then
                RaiseEvent DatasharingRowDeleted(Me, New DatasharingRowChangeEvent(CType(e.Row,DatasharingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DatasharingRowDeletingEvent) Is Nothing) Then
                RaiseEvent DatasharingRowDeleting(Me, New DatasharingRowChangeEvent(CType(e.Row,DatasharingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDatasharingRow(ByVal row As DatasharingRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Dulieu = New Dulieu
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DatasharingDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ThongtinDataTable
        Inherits Global.System.Data.TypedTableBase(Of ThongtinRow)
        
        Private columnhoten As Global.System.Data.DataColumn
        
        Private columnsocmnd As Global.System.Data.DataColumn
        
        Private columnngaycap As Global.System.Data.DataColumn
        
        Private columnnoicap As Global.System.Data.DataColumn
        
        Private columngioitinh As Global.System.Data.DataColumn
        
        Private columntochuc As Global.System.Data.DataColumn
        
        Private columndiachi As Global.System.Data.DataColumn
        
        Private columndienthoai As Global.System.Data.DataColumn
        
        Private columnemail As Global.System.Data.DataColumn
        
        Private columnmucdich As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Thongtin"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property hotenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhoten
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property socmndColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsocmnd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ngaycapColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnngaycap
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property noicapColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnoicap
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property gioitinhColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngioitinh
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tochucColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntochuc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property diachiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndiachi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dienthoaiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndienthoai
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property emailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mucdichColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmucdich
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ThongtinRow
            Get
                Return CType(Me.Rows(index),ThongtinRow)
            End Get
        End Property
        
        Public Event ThongtinRowChanging As ThongtinRowChangeEventHandler
        
        Public Event ThongtinRowChanged As ThongtinRowChangeEventHandler
        
        Public Event ThongtinRowDeleting As ThongtinRowChangeEventHandler
        
        Public Event ThongtinRowDeleted As ThongtinRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddThongtinRow(ByVal row As ThongtinRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddThongtinRow(ByVal hoten As String, ByVal socmnd As String, ByVal ngaycap As String, ByVal noicap As String, ByVal gioitinh As String, ByVal tochuc As String, ByVal diachi As String, ByVal dienthoai As String, ByVal email As String, ByVal mucdich As String) As ThongtinRow
            Dim rowThongtinRow As ThongtinRow = CType(Me.NewRow,ThongtinRow)
            Dim columnValuesArray() As Object = New Object() {hoten, socmnd, ngaycap, noicap, gioitinh, tochuc, diachi, dienthoai, email, mucdich}
            rowThongtinRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowThongtinRow)
            Return rowThongtinRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ThongtinDataTable = CType(MyBase.Clone,ThongtinDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ThongtinDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnhoten = MyBase.Columns("hoten")
            Me.columnsocmnd = MyBase.Columns("socmnd")
            Me.columnngaycap = MyBase.Columns("ngaycap")
            Me.columnnoicap = MyBase.Columns("noicap")
            Me.columngioitinh = MyBase.Columns("gioitinh")
            Me.columntochuc = MyBase.Columns("tochuc")
            Me.columndiachi = MyBase.Columns("diachi")
            Me.columndienthoai = MyBase.Columns("dienthoai")
            Me.columnemail = MyBase.Columns("email")
            Me.columnmucdich = MyBase.Columns("mucdich")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnhoten = New Global.System.Data.DataColumn("hoten", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhoten)
            Me.columnsocmnd = New Global.System.Data.DataColumn("socmnd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsocmnd)
            Me.columnngaycap = New Global.System.Data.DataColumn("ngaycap", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnngaycap)
            Me.columnnoicap = New Global.System.Data.DataColumn("noicap", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnoicap)
            Me.columngioitinh = New Global.System.Data.DataColumn("gioitinh", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngioitinh)
            Me.columntochuc = New Global.System.Data.DataColumn("tochuc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntochuc)
            Me.columndiachi = New Global.System.Data.DataColumn("diachi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndiachi)
            Me.columndienthoai = New Global.System.Data.DataColumn("dienthoai", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndienthoai)
            Me.columnemail = New Global.System.Data.DataColumn("email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemail)
            Me.columnmucdich = New Global.System.Data.DataColumn("mucdich", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmucdich)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewThongtinRow() As ThongtinRow
            Return CType(Me.NewRow,ThongtinRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ThongtinRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ThongtinRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ThongtinRowChangedEvent) Is Nothing) Then
                RaiseEvent ThongtinRowChanged(Me, New ThongtinRowChangeEvent(CType(e.Row,ThongtinRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ThongtinRowChangingEvent) Is Nothing) Then
                RaiseEvent ThongtinRowChanging(Me, New ThongtinRowChangeEvent(CType(e.Row,ThongtinRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ThongtinRowDeletedEvent) Is Nothing) Then
                RaiseEvent ThongtinRowDeleted(Me, New ThongtinRowChangeEvent(CType(e.Row,ThongtinRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ThongtinRowDeletingEvent) Is Nothing) Then
                RaiseEvent ThongtinRowDeleting(Me, New ThongtinRowChangeEvent(CType(e.Row,ThongtinRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveThongtinRow(ByVal row As ThongtinRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Dulieu = New Dulieu
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ThongtinDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class lang_enDataTable
        Inherits Global.System.Data.TypedTableBase(Of lang_enRow)
        
        Private columnlab_hoten As Global.System.Data.DataColumn
        
        Private columnlab_cmnd As Global.System.Data.DataColumn
        
        Private columnlab_ngaycap As Global.System.Data.DataColumn
        
        Private columnlab_noicap As Global.System.Data.DataColumn
        
        Private columnlab_gioitinh As Global.System.Data.DataColumn
        
        Private columnlab_tochuc As Global.System.Data.DataColumn
        
        Private columnlab_diachi As Global.System.Data.DataColumn
        
        Private columnlab_dienthoai As Global.System.Data.DataColumn
        
        Private columnlab_email As Global.System.Data.DataColumn
        
        Private columnlab_mucdich As Global.System.Data.DataColumn
        
        Private columncmdLuuThongTin As Global.System.Data.DataColumn
        
        Private columnCmdNapthongtin As Global.System.Data.DataColumn
        
        Private columnCmdNext1 As Global.System.Data.DataColumn
        
        Private columnlab_redpoint As Global.System.Data.DataColumn
        
        Private columnGroup_1 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "lang_en"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_hotenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_hoten
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_cmndColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_cmnd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_ngaycapColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_ngaycap
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_noicapColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_noicap
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_gioitinhColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_gioitinh
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_tochucColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_tochuc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_diachiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_diachi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_dienthoaiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_dienthoai
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_emailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_email
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_mucdichColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_mucdich
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cmdLuuThongTinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncmdLuuThongTin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CmdNapthongtinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCmdNapthongtin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CmdNext1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCmdNext1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_redpointColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_redpoint
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Group_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroup_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As lang_enRow
            Get
                Return CType(Me.Rows(index),lang_enRow)
            End Get
        End Property
        
        Public Event lang_enRowChanging As lang_enRowChangeEventHandler
        
        Public Event lang_enRowChanged As lang_enRowChangeEventHandler
        
        Public Event lang_enRowDeleting As lang_enRowChangeEventHandler
        
        Public Event lang_enRowDeleted As lang_enRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addlang_enRow(ByVal row As lang_enRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addlang_enRow(ByVal lab_hoten As String, ByVal lab_cmnd As String, ByVal lab_ngaycap As String, ByVal lab_noicap As String, ByVal lab_gioitinh As String, ByVal lab_tochuc As String, ByVal lab_diachi As String, ByVal lab_dienthoai As String, ByVal lab_email As String, ByVal lab_mucdich As String, ByVal cmdLuuThongTin As String, ByVal CmdNapthongtin As String, ByVal CmdNext1 As String, ByVal lab_redpoint As String, ByVal Group_1 As String) As lang_enRow
            Dim rowlang_enRow As lang_enRow = CType(Me.NewRow,lang_enRow)
            Dim columnValuesArray() As Object = New Object() {lab_hoten, lab_cmnd, lab_ngaycap, lab_noicap, lab_gioitinh, lab_tochuc, lab_diachi, lab_dienthoai, lab_email, lab_mucdich, cmdLuuThongTin, CmdNapthongtin, CmdNext1, lab_redpoint, Group_1}
            rowlang_enRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowlang_enRow)
            Return rowlang_enRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As lang_enDataTable = CType(MyBase.Clone,lang_enDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New lang_enDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnlab_hoten = MyBase.Columns("lab_hoten")
            Me.columnlab_cmnd = MyBase.Columns("lab_cmnd")
            Me.columnlab_ngaycap = MyBase.Columns("lab_ngaycap")
            Me.columnlab_noicap = MyBase.Columns("lab_noicap")
            Me.columnlab_gioitinh = MyBase.Columns("lab_gioitinh")
            Me.columnlab_tochuc = MyBase.Columns("lab_tochuc")
            Me.columnlab_diachi = MyBase.Columns("lab_diachi")
            Me.columnlab_dienthoai = MyBase.Columns("lab_dienthoai")
            Me.columnlab_email = MyBase.Columns("lab_email")
            Me.columnlab_mucdich = MyBase.Columns("lab_mucdich")
            Me.columncmdLuuThongTin = MyBase.Columns("cmdLuuThongTin")
            Me.columnCmdNapthongtin = MyBase.Columns("CmdNapthongtin")
            Me.columnCmdNext1 = MyBase.Columns("CmdNext1")
            Me.columnlab_redpoint = MyBase.Columns("lab_redpoint")
            Me.columnGroup_1 = MyBase.Columns("Group_1")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnlab_hoten = New Global.System.Data.DataColumn("lab_hoten", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_hoten)
            Me.columnlab_cmnd = New Global.System.Data.DataColumn("lab_cmnd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_cmnd)
            Me.columnlab_ngaycap = New Global.System.Data.DataColumn("lab_ngaycap", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_ngaycap)
            Me.columnlab_noicap = New Global.System.Data.DataColumn("lab_noicap", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_noicap)
            Me.columnlab_gioitinh = New Global.System.Data.DataColumn("lab_gioitinh", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_gioitinh)
            Me.columnlab_tochuc = New Global.System.Data.DataColumn("lab_tochuc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_tochuc)
            Me.columnlab_diachi = New Global.System.Data.DataColumn("lab_diachi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_diachi)
            Me.columnlab_dienthoai = New Global.System.Data.DataColumn("lab_dienthoai", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_dienthoai)
            Me.columnlab_email = New Global.System.Data.DataColumn("lab_email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_email)
            Me.columnlab_mucdich = New Global.System.Data.DataColumn("lab_mucdich", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_mucdich)
            Me.columncmdLuuThongTin = New Global.System.Data.DataColumn("cmdLuuThongTin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncmdLuuThongTin)
            Me.columnCmdNapthongtin = New Global.System.Data.DataColumn("CmdNapthongtin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCmdNapthongtin)
            Me.columnCmdNext1 = New Global.System.Data.DataColumn("CmdNext1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCmdNext1)
            Me.columnlab_redpoint = New Global.System.Data.DataColumn("lab_redpoint", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_redpoint)
            Me.columnGroup_1 = New Global.System.Data.DataColumn("Group_1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroup_1)
            Me.columnlab_hoten.DefaultValue = CType("",String)
            Me.columnlab_cmnd.DefaultValue = CType("",String)
            Me.columnlab_ngaycap.DefaultValue = CType("",String)
            Me.columnlab_noicap.DefaultValue = CType("",String)
            Me.columnlab_gioitinh.DefaultValue = CType("",String)
            Me.columnlab_tochuc.DefaultValue = CType("",String)
            Me.columnlab_diachi.DefaultValue = CType("",String)
            Me.columnlab_dienthoai.DefaultValue = CType("",String)
            Me.columnlab_email.DefaultValue = CType("",String)
            Me.columnlab_mucdich.DefaultValue = CType("",String)
            Me.columncmdLuuThongTin.DefaultValue = CType("",String)
            Me.columnCmdNapthongtin.DefaultValue = CType("",String)
            Me.columnCmdNext1.DefaultValue = CType("",String)
            Me.columnlab_redpoint.DefaultValue = CType("",String)
            Me.columnGroup_1.DefaultValue = CType("",String)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newlang_enRow() As lang_enRow
            Return CType(Me.NewRow,lang_enRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New lang_enRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(lang_enRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.lang_enRowChangedEvent) Is Nothing) Then
                RaiseEvent lang_enRowChanged(Me, New lang_enRowChangeEvent(CType(e.Row,lang_enRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.lang_enRowChangingEvent) Is Nothing) Then
                RaiseEvent lang_enRowChanging(Me, New lang_enRowChangeEvent(CType(e.Row,lang_enRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.lang_enRowDeletedEvent) Is Nothing) Then
                RaiseEvent lang_enRowDeleted(Me, New lang_enRowChangeEvent(CType(e.Row,lang_enRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.lang_enRowDeletingEvent) Is Nothing) Then
                RaiseEvent lang_enRowDeleting(Me, New lang_enRowChangeEvent(CType(e.Row,lang_enRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removelang_enRow(ByVal row As lang_enRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Dulieu = New Dulieu
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "lang_enDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class lang_viDataTable
        Inherits Global.System.Data.TypedTableBase(Of lang_viRow)
        
        Private columnlab_hoten As Global.System.Data.DataColumn
        
        Private columnlab_cmnd As Global.System.Data.DataColumn
        
        Private columnlab_ngaycap As Global.System.Data.DataColumn
        
        Private columnlab_noicap As Global.System.Data.DataColumn
        
        Private columnlab_gioitinh As Global.System.Data.DataColumn
        
        Private columnlab_tochuc As Global.System.Data.DataColumn
        
        Private columnlab_diachi As Global.System.Data.DataColumn
        
        Private columnlab_dienthoai As Global.System.Data.DataColumn
        
        Private columnlab_email As Global.System.Data.DataColumn
        
        Private columnlab_mucdich As Global.System.Data.DataColumn
        
        Private columncmdLuuThongTin As Global.System.Data.DataColumn
        
        Private columnCmdNapthongtin As Global.System.Data.DataColumn
        
        Private columnCmdNext1 As Global.System.Data.DataColumn
        
        Private columnlab_redpoint As Global.System.Data.DataColumn
        
        Private columnGroup_1 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "lang_vi"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_hotenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_hoten
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_cmndColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_cmnd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_ngaycapColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_ngaycap
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_noicapColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_noicap
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_gioitinhColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_gioitinh
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_tochucColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_tochuc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_diachiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_diachi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_dienthoaiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_dienthoai
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_emailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_email
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_mucdichColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_mucdich
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cmdLuuThongTinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncmdLuuThongTin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CmdNapthongtinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCmdNapthongtin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CmdNext1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCmdNext1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_redpointColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_redpoint
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Group_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroup_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As lang_viRow
            Get
                Return CType(Me.Rows(index),lang_viRow)
            End Get
        End Property
        
        Public Event lang_viRowChanging As lang_viRowChangeEventHandler
        
        Public Event lang_viRowChanged As lang_viRowChangeEventHandler
        
        Public Event lang_viRowDeleting As lang_viRowChangeEventHandler
        
        Public Event lang_viRowDeleted As lang_viRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addlang_viRow(ByVal row As lang_viRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addlang_viRow(ByVal lab_hoten As String, ByVal lab_cmnd As String, ByVal lab_ngaycap As String, ByVal lab_noicap As String, ByVal lab_gioitinh As String, ByVal lab_tochuc As String, ByVal lab_diachi As String, ByVal lab_dienthoai As String, ByVal lab_email As String, ByVal lab_mucdich As String, ByVal cmdLuuThongTin As String, ByVal CmdNapthongtin As String, ByVal CmdNext1 As String, ByVal lab_redpoint As String, ByVal Group_1 As String) As lang_viRow
            Dim rowlang_viRow As lang_viRow = CType(Me.NewRow,lang_viRow)
            Dim columnValuesArray() As Object = New Object() {lab_hoten, lab_cmnd, lab_ngaycap, lab_noicap, lab_gioitinh, lab_tochuc, lab_diachi, lab_dienthoai, lab_email, lab_mucdich, cmdLuuThongTin, CmdNapthongtin, CmdNext1, lab_redpoint, Group_1}
            rowlang_viRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowlang_viRow)
            Return rowlang_viRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As lang_viDataTable = CType(MyBase.Clone,lang_viDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New lang_viDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnlab_hoten = MyBase.Columns("lab_hoten")
            Me.columnlab_cmnd = MyBase.Columns("lab_cmnd")
            Me.columnlab_ngaycap = MyBase.Columns("lab_ngaycap")
            Me.columnlab_noicap = MyBase.Columns("lab_noicap")
            Me.columnlab_gioitinh = MyBase.Columns("lab_gioitinh")
            Me.columnlab_tochuc = MyBase.Columns("lab_tochuc")
            Me.columnlab_diachi = MyBase.Columns("lab_diachi")
            Me.columnlab_dienthoai = MyBase.Columns("lab_dienthoai")
            Me.columnlab_email = MyBase.Columns("lab_email")
            Me.columnlab_mucdich = MyBase.Columns("lab_mucdich")
            Me.columncmdLuuThongTin = MyBase.Columns("cmdLuuThongTin")
            Me.columnCmdNapthongtin = MyBase.Columns("CmdNapthongtin")
            Me.columnCmdNext1 = MyBase.Columns("CmdNext1")
            Me.columnlab_redpoint = MyBase.Columns("lab_redpoint")
            Me.columnGroup_1 = MyBase.Columns("Group_1")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnlab_hoten = New Global.System.Data.DataColumn("lab_hoten", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_hoten)
            Me.columnlab_cmnd = New Global.System.Data.DataColumn("lab_cmnd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_cmnd)
            Me.columnlab_ngaycap = New Global.System.Data.DataColumn("lab_ngaycap", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_ngaycap)
            Me.columnlab_noicap = New Global.System.Data.DataColumn("lab_noicap", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_noicap)
            Me.columnlab_gioitinh = New Global.System.Data.DataColumn("lab_gioitinh", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_gioitinh)
            Me.columnlab_tochuc = New Global.System.Data.DataColumn("lab_tochuc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_tochuc)
            Me.columnlab_diachi = New Global.System.Data.DataColumn("lab_diachi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_diachi)
            Me.columnlab_dienthoai = New Global.System.Data.DataColumn("lab_dienthoai", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_dienthoai)
            Me.columnlab_email = New Global.System.Data.DataColumn("lab_email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_email)
            Me.columnlab_mucdich = New Global.System.Data.DataColumn("lab_mucdich", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_mucdich)
            Me.columncmdLuuThongTin = New Global.System.Data.DataColumn("cmdLuuThongTin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncmdLuuThongTin)
            Me.columnCmdNapthongtin = New Global.System.Data.DataColumn("CmdNapthongtin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCmdNapthongtin)
            Me.columnCmdNext1 = New Global.System.Data.DataColumn("CmdNext1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCmdNext1)
            Me.columnlab_redpoint = New Global.System.Data.DataColumn("lab_redpoint", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_redpoint)
            Me.columnGroup_1 = New Global.System.Data.DataColumn("Group_1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroup_1)
            Me.columnlab_hoten.DefaultValue = CType("",String)
            Me.columnlab_cmnd.DefaultValue = CType("",String)
            Me.columnlab_ngaycap.DefaultValue = CType("",String)
            Me.columnlab_noicap.DefaultValue = CType("",String)
            Me.columnlab_gioitinh.DefaultValue = CType("",String)
            Me.columnlab_tochuc.DefaultValue = CType("",String)
            Me.columnlab_diachi.DefaultValue = CType("",String)
            Me.columnlab_dienthoai.DefaultValue = CType("",String)
            Me.columnlab_email.DefaultValue = CType("",String)
            Me.columnlab_mucdich.DefaultValue = CType("",String)
            Me.columncmdLuuThongTin.DefaultValue = CType("",String)
            Me.columnCmdNapthongtin.DefaultValue = CType("",String)
            Me.columnCmdNext1.DefaultValue = CType("",String)
            Me.columnlab_redpoint.DefaultValue = CType("",String)
            Me.columnGroup_1.DefaultValue = CType("",String)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newlang_viRow() As lang_viRow
            Return CType(Me.NewRow,lang_viRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New lang_viRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(lang_viRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.lang_viRowChangedEvent) Is Nothing) Then
                RaiseEvent lang_viRowChanged(Me, New lang_viRowChangeEvent(CType(e.Row,lang_viRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.lang_viRowChangingEvent) Is Nothing) Then
                RaiseEvent lang_viRowChanging(Me, New lang_viRowChangeEvent(CType(e.Row,lang_viRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.lang_viRowDeletedEvent) Is Nothing) Then
                RaiseEvent lang_viRowDeleted(Me, New lang_viRowChangeEvent(CType(e.Row,lang_viRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.lang_viRowDeletingEvent) Is Nothing) Then
                RaiseEvent lang_viRowDeleting(Me, New lang_viRowChangeEvent(CType(e.Row,lang_viRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removelang_viRow(ByVal row As lang_viRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Dulieu = New Dulieu
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "lang_viDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tochucDataTable
        Inherits Global.System.Data.TypedTableBase(Of tochucRow)
        
        Private columntentc_vi As Global.System.Data.DataColumn
        
        Private columntentc_en As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tochuc"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tentc_viColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntentc_vi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tentc_enColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntentc_en
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tochucRow
            Get
                Return CType(Me.Rows(index),tochucRow)
            End Get
        End Property
        
        Public Event tochucRowChanging As tochucRowChangeEventHandler
        
        Public Event tochucRowChanged As tochucRowChangeEventHandler
        
        Public Event tochucRowDeleting As tochucRowChangeEventHandler
        
        Public Event tochucRowDeleted As tochucRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtochucRow(ByVal row As tochucRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtochucRow(ByVal tentc_vi As String, ByVal tentc_en As String) As tochucRow
            Dim rowtochucRow As tochucRow = CType(Me.NewRow,tochucRow)
            Dim columnValuesArray() As Object = New Object() {tentc_vi, tentc_en}
            rowtochucRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtochucRow)
            Return rowtochucRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tochucDataTable = CType(MyBase.Clone,tochucDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tochucDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columntentc_vi = MyBase.Columns("tentc_vi")
            Me.columntentc_en = MyBase.Columns("tentc_en")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columntentc_vi = New Global.System.Data.DataColumn("tentc_vi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntentc_vi)
            Me.columntentc_en = New Global.System.Data.DataColumn("tentc_en", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntentc_en)
            Me.columntentc_vi.DefaultValue = CType("",String)
            Me.columntentc_en.DefaultValue = CType("",String)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtochucRow() As tochucRow
            Return CType(Me.NewRow,tochucRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tochucRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tochucRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tochucRowChangedEvent) Is Nothing) Then
                RaiseEvent tochucRowChanged(Me, New tochucRowChangeEvent(CType(e.Row,tochucRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tochucRowChangingEvent) Is Nothing) Then
                RaiseEvent tochucRowChanging(Me, New tochucRowChangeEvent(CType(e.Row,tochucRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tochucRowDeletedEvent) Is Nothing) Then
                RaiseEvent tochucRowDeleted(Me, New tochucRowChangeEvent(CType(e.Row,tochucRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tochucRowDeletingEvent) Is Nothing) Then
                RaiseEvent tochucRowDeleting(Me, New tochucRowChangeEvent(CType(e.Row,tochucRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetochucRow(ByVal row As tochucRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Dulieu = New Dulieu
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tochucDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class taive_enDataTable
        Inherits Global.System.Data.TypedTableBase(Of taive_enRow)
        
        Private columnGroup_3 As Global.System.Data.DataColumn
        
        Private columngroup_hanhchinh As Global.System.Data.DataColumn
        
        Private columnGroup_chiso As Global.System.Data.DataColumn
        
        Private columnGroup_shapefile As Global.System.Data.DataColumn
        
        Private columnCmdHuy As Global.System.Data.DataColumn
        
        Private columncmdTaiVe As Global.System.Data.DataColumn
        
        Private columnCmdCSVFile As Global.System.Data.DataColumn
        
        Private columnlab_chonDL As Global.System.Data.DataColumn
        
        Private columnlab_tinh As Global.System.Data.DataColumn
        
        Private columnlab_huyen As Global.System.Data.DataColumn
        
        Private columnlab_xa As Global.System.Data.DataColumn
        
        Private columnchk_all As Global.System.Data.DataColumn
        
        Private columnCmdThayDoi As Global.System.Data.DataColumn
        
        Private columnGroup_nam As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "taive_en"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Group_3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroup_3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property group_hanhchinhColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngroup_hanhchinh
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Group_chisoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroup_chiso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Group_shapefileColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroup_shapefile
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CmdHuyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCmdHuy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cmdTaiVeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncmdTaiVe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CmdCSVFileColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCmdCSVFile
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_chonDLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_chonDL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_tinhColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_tinh
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_huyenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_huyen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_xaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_xa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property chk_allColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnchk_all
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CmdThayDoiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCmdThayDoi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Group_namColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroup_nam
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As taive_enRow
            Get
                Return CType(Me.Rows(index),taive_enRow)
            End Get
        End Property
        
        Public Event taive_enRowChanging As taive_enRowChangeEventHandler
        
        Public Event taive_enRowChanged As taive_enRowChangeEventHandler
        
        Public Event taive_enRowDeleting As taive_enRowChangeEventHandler
        
        Public Event taive_enRowDeleted As taive_enRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addtaive_enRow(ByVal row As taive_enRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addtaive_enRow(ByVal Group_3 As String, ByVal group_hanhchinh As String, ByVal Group_chiso As String, ByVal Group_shapefile As String, ByVal CmdHuy As String, ByVal cmdTaiVe As String, ByVal CmdCSVFile As String, ByVal lab_chonDL As String, ByVal lab_tinh As String, ByVal lab_huyen As String, ByVal lab_xa As String, ByVal chk_all As String, ByVal CmdThayDoi As String, ByVal Group_nam As String) As taive_enRow
            Dim rowtaive_enRow As taive_enRow = CType(Me.NewRow,taive_enRow)
            Dim columnValuesArray() As Object = New Object() {Group_3, group_hanhchinh, Group_chiso, Group_shapefile, CmdHuy, cmdTaiVe, CmdCSVFile, lab_chonDL, lab_tinh, lab_huyen, lab_xa, chk_all, CmdThayDoi, Group_nam}
            rowtaive_enRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtaive_enRow)
            Return rowtaive_enRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As taive_enDataTable = CType(MyBase.Clone,taive_enDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New taive_enDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnGroup_3 = MyBase.Columns("Group_3")
            Me.columngroup_hanhchinh = MyBase.Columns("group_hanhchinh")
            Me.columnGroup_chiso = MyBase.Columns("Group_chiso")
            Me.columnGroup_shapefile = MyBase.Columns("Group_shapefile")
            Me.columnCmdHuy = MyBase.Columns("CmdHuy")
            Me.columncmdTaiVe = MyBase.Columns("cmdTaiVe")
            Me.columnCmdCSVFile = MyBase.Columns("CmdCSVFile")
            Me.columnlab_chonDL = MyBase.Columns("lab_chonDL")
            Me.columnlab_tinh = MyBase.Columns("lab_tinh")
            Me.columnlab_huyen = MyBase.Columns("lab_huyen")
            Me.columnlab_xa = MyBase.Columns("lab_xa")
            Me.columnchk_all = MyBase.Columns("chk_all")
            Me.columnCmdThayDoi = MyBase.Columns("CmdThayDoi")
            Me.columnGroup_nam = MyBase.Columns("Group_nam")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnGroup_3 = New Global.System.Data.DataColumn("Group_3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroup_3)
            Me.columngroup_hanhchinh = New Global.System.Data.DataColumn("group_hanhchinh", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngroup_hanhchinh)
            Me.columnGroup_chiso = New Global.System.Data.DataColumn("Group_chiso", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroup_chiso)
            Me.columnGroup_shapefile = New Global.System.Data.DataColumn("Group_shapefile", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroup_shapefile)
            Me.columnCmdHuy = New Global.System.Data.DataColumn("CmdHuy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCmdHuy)
            Me.columncmdTaiVe = New Global.System.Data.DataColumn("cmdTaiVe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncmdTaiVe)
            Me.columnCmdCSVFile = New Global.System.Data.DataColumn("CmdCSVFile", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCmdCSVFile)
            Me.columnlab_chonDL = New Global.System.Data.DataColumn("lab_chonDL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_chonDL)
            Me.columnlab_tinh = New Global.System.Data.DataColumn("lab_tinh", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_tinh)
            Me.columnlab_huyen = New Global.System.Data.DataColumn("lab_huyen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_huyen)
            Me.columnlab_xa = New Global.System.Data.DataColumn("lab_xa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_xa)
            Me.columnchk_all = New Global.System.Data.DataColumn("chk_all", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnchk_all)
            Me.columnCmdThayDoi = New Global.System.Data.DataColumn("CmdThayDoi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCmdThayDoi)
            Me.columnGroup_nam = New Global.System.Data.DataColumn("Group_nam", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroup_nam)
            Me.columnGroup_3.DefaultValue = CType("",String)
            Me.columngroup_hanhchinh.DefaultValue = CType("",String)
            Me.columnGroup_chiso.DefaultValue = CType("",String)
            Me.columnGroup_shapefile.DefaultValue = CType("",String)
            Me.columnCmdHuy.DefaultValue = CType("",String)
            Me.columncmdTaiVe.DefaultValue = CType("",String)
            Me.columnCmdCSVFile.DefaultValue = CType("",String)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newtaive_enRow() As taive_enRow
            Return CType(Me.NewRow,taive_enRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New taive_enRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(taive_enRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.taive_enRowChangedEvent) Is Nothing) Then
                RaiseEvent taive_enRowChanged(Me, New taive_enRowChangeEvent(CType(e.Row,taive_enRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.taive_enRowChangingEvent) Is Nothing) Then
                RaiseEvent taive_enRowChanging(Me, New taive_enRowChangeEvent(CType(e.Row,taive_enRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.taive_enRowDeletedEvent) Is Nothing) Then
                RaiseEvent taive_enRowDeleted(Me, New taive_enRowChangeEvent(CType(e.Row,taive_enRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.taive_enRowDeletingEvent) Is Nothing) Then
                RaiseEvent taive_enRowDeleting(Me, New taive_enRowChangeEvent(CType(e.Row,taive_enRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removetaive_enRow(ByVal row As taive_enRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Dulieu = New Dulieu
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "taive_enDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class taive_viDataTable
        Inherits Global.System.Data.TypedTableBase(Of taive_viRow)
        
        Private columnGroup_3 As Global.System.Data.DataColumn
        
        Private columngroup_hanhchinh As Global.System.Data.DataColumn
        
        Private columnGroup_chiso As Global.System.Data.DataColumn
        
        Private columnGroup_shapefile As Global.System.Data.DataColumn
        
        Private columnCmdHuy As Global.System.Data.DataColumn
        
        Private columncmdTaiVe As Global.System.Data.DataColumn
        
        Private columnCmdCSVFile As Global.System.Data.DataColumn
        
        Private columnlab_chonDL As Global.System.Data.DataColumn
        
        Private columnlab_tinh As Global.System.Data.DataColumn
        
        Private columnlab_huyen As Global.System.Data.DataColumn
        
        Private columnlab_xa As Global.System.Data.DataColumn
        
        Private columnchk_all As Global.System.Data.DataColumn
        
        Private columnCmdThayDoi As Global.System.Data.DataColumn
        
        Private columnGroup_nam As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "taive_vi"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Group_3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroup_3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property group_hanhchinhColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngroup_hanhchinh
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Group_chisoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroup_chiso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Group_shapefileColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroup_shapefile
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CmdHuyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCmdHuy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cmdTaiVeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncmdTaiVe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CmdCSVFileColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCmdCSVFile
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_chonDLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_chonDL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_tinhColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_tinh
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_huyenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_huyen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lab_xaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlab_xa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property chk_allColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnchk_all
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CmdThayDoiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCmdThayDoi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Group_namColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroup_nam
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As taive_viRow
            Get
                Return CType(Me.Rows(index),taive_viRow)
            End Get
        End Property
        
        Public Event taive_viRowChanging As taive_viRowChangeEventHandler
        
        Public Event taive_viRowChanged As taive_viRowChangeEventHandler
        
        Public Event taive_viRowDeleting As taive_viRowChangeEventHandler
        
        Public Event taive_viRowDeleted As taive_viRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addtaive_viRow(ByVal row As taive_viRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addtaive_viRow(ByVal Group_3 As String, ByVal group_hanhchinh As String, ByVal Group_chiso As String, ByVal Group_shapefile As String, ByVal CmdHuy As String, ByVal cmdTaiVe As String, ByVal CmdCSVFile As String, ByVal lab_chonDL As String, ByVal lab_tinh As String, ByVal lab_huyen As String, ByVal lab_xa As String, ByVal chk_all As String, ByVal CmdThayDoi As String, ByVal Group_nam As String) As taive_viRow
            Dim rowtaive_viRow As taive_viRow = CType(Me.NewRow,taive_viRow)
            Dim columnValuesArray() As Object = New Object() {Group_3, group_hanhchinh, Group_chiso, Group_shapefile, CmdHuy, cmdTaiVe, CmdCSVFile, lab_chonDL, lab_tinh, lab_huyen, lab_xa, chk_all, CmdThayDoi, Group_nam}
            rowtaive_viRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtaive_viRow)
            Return rowtaive_viRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As taive_viDataTable = CType(MyBase.Clone,taive_viDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New taive_viDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnGroup_3 = MyBase.Columns("Group_3")
            Me.columngroup_hanhchinh = MyBase.Columns("group_hanhchinh")
            Me.columnGroup_chiso = MyBase.Columns("Group_chiso")
            Me.columnGroup_shapefile = MyBase.Columns("Group_shapefile")
            Me.columnCmdHuy = MyBase.Columns("CmdHuy")
            Me.columncmdTaiVe = MyBase.Columns("cmdTaiVe")
            Me.columnCmdCSVFile = MyBase.Columns("CmdCSVFile")
            Me.columnlab_chonDL = MyBase.Columns("lab_chonDL")
            Me.columnlab_tinh = MyBase.Columns("lab_tinh")
            Me.columnlab_huyen = MyBase.Columns("lab_huyen")
            Me.columnlab_xa = MyBase.Columns("lab_xa")
            Me.columnchk_all = MyBase.Columns("chk_all")
            Me.columnCmdThayDoi = MyBase.Columns("CmdThayDoi")
            Me.columnGroup_nam = MyBase.Columns("Group_nam")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnGroup_3 = New Global.System.Data.DataColumn("Group_3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroup_3)
            Me.columngroup_hanhchinh = New Global.System.Data.DataColumn("group_hanhchinh", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngroup_hanhchinh)
            Me.columnGroup_chiso = New Global.System.Data.DataColumn("Group_chiso", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroup_chiso)
            Me.columnGroup_shapefile = New Global.System.Data.DataColumn("Group_shapefile", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroup_shapefile)
            Me.columnCmdHuy = New Global.System.Data.DataColumn("CmdHuy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCmdHuy)
            Me.columncmdTaiVe = New Global.System.Data.DataColumn("cmdTaiVe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncmdTaiVe)
            Me.columnCmdCSVFile = New Global.System.Data.DataColumn("CmdCSVFile", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCmdCSVFile)
            Me.columnlab_chonDL = New Global.System.Data.DataColumn("lab_chonDL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_chonDL)
            Me.columnlab_tinh = New Global.System.Data.DataColumn("lab_tinh", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_tinh)
            Me.columnlab_huyen = New Global.System.Data.DataColumn("lab_huyen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_huyen)
            Me.columnlab_xa = New Global.System.Data.DataColumn("lab_xa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlab_xa)
            Me.columnchk_all = New Global.System.Data.DataColumn("chk_all", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnchk_all)
            Me.columnCmdThayDoi = New Global.System.Data.DataColumn("CmdThayDoi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCmdThayDoi)
            Me.columnGroup_nam = New Global.System.Data.DataColumn("Group_nam", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroup_nam)
            Me.columnGroup_3.DefaultValue = CType("",String)
            Me.columngroup_hanhchinh.DefaultValue = CType("",String)
            Me.columnGroup_chiso.DefaultValue = CType("",String)
            Me.columnGroup_shapefile.DefaultValue = CType("",String)
            Me.columnCmdCSVFile.DefaultValue = CType("",String)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newtaive_viRow() As taive_viRow
            Return CType(Me.NewRow,taive_viRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New taive_viRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(taive_viRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.taive_viRowChangedEvent) Is Nothing) Then
                RaiseEvent taive_viRowChanged(Me, New taive_viRowChangeEvent(CType(e.Row,taive_viRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.taive_viRowChangingEvent) Is Nothing) Then
                RaiseEvent taive_viRowChanging(Me, New taive_viRowChangeEvent(CType(e.Row,taive_viRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.taive_viRowDeletedEvent) Is Nothing) Then
                RaiseEvent taive_viRowDeleted(Me, New taive_viRowChangeEvent(CType(e.Row,taive_viRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.taive_viRowDeletingEvent) Is Nothing) Then
                RaiseEvent taive_viRowDeleting(Me, New taive_viRowChangeEvent(CType(e.Row,taive_viRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removetaive_viRow(ByVal row As taive_viRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Dulieu = New Dulieu
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "taive_viDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TruongRow
        Inherits Global.System.Data.DataRow
        
        Private tableTruong As TruongDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTruong = CType(Me.Table,TruongDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property column_name() As String
            Get
                Try 
                    Return CType(Me(Me.tableTruong.column_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'column_name' in table 'Truong' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTruong.column_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property column_name_vi() As String
            Get
                Try 
                    Return CType(Me(Me.tableTruong.column_name_viColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'column_name_vi' in table 'Truong' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTruong.column_name_viColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property column_name_en() As String
            Get
                Try 
                    Return CType(Me(Me.tableTruong.column_name_enColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'column_name_en' in table 'Truong' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTruong.column_name_enColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscolumn_nameNull() As Boolean
            Return Me.IsNull(Me.tableTruong.column_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcolumn_nameNull()
            Me(Me.tableTruong.column_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscolumn_name_viNull() As Boolean
            Return Me.IsNull(Me.tableTruong.column_name_viColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcolumn_name_viNull()
            Me(Me.tableTruong.column_name_viColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscolumn_name_enNull() As Boolean
            Return Me.IsNull(Me.tableTruong.column_name_enColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcolumn_name_enNull()
            Me(Me.tableTruong.column_name_enColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class huyenRow
        Inherits Global.System.Data.DataRow
        
        Private tablehuyen As huyenDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablehuyen = CType(Me.Table,huyenDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property matinh() As String
            Get
                Try 
                    Return CType(Me(Me.tablehuyen.matinhColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'matinh' in table 'Huyen' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehuyen.matinhColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property mahuyen() As String
            Get
                Try 
                    Return CType(Me(Me.tablehuyen.mahuyenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'mahuyen' in table 'Huyen' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehuyen.mahuyenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tenhuyen() As String
            Get
                Try 
                    Return CType(Me(Me.tablehuyen.tenhuyenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tenhuyen' in table 'Huyen' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehuyen.tenhuyenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tenhuyen_en() As String
            Get
                Try 
                    Return CType(Me(Me.tablehuyen.tenhuyen_enColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tenhuyen_en' in table 'Huyen' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehuyen.tenhuyen_enColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmatinhNull() As Boolean
            Return Me.IsNull(Me.tablehuyen.matinhColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmatinhNull()
            Me(Me.tablehuyen.matinhColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmahuyenNull() As Boolean
            Return Me.IsNull(Me.tablehuyen.mahuyenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmahuyenNull()
            Me(Me.tablehuyen.mahuyenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstenhuyenNull() As Boolean
            Return Me.IsNull(Me.tablehuyen.tenhuyenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettenhuyenNull()
            Me(Me.tablehuyen.tenhuyenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istenhuyen_enNull() As Boolean
            Return Me.IsNull(Me.tablehuyen.tenhuyen_enColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settenhuyen_enNull()
            Me(Me.tablehuyen.tenhuyen_enColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class xaRow
        Inherits Global.System.Data.DataRow
        
        Private tablexa As xaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablexa = CType(Me.Table,xaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property mahuyen() As String
            Get
                Try 
                    Return CType(Me(Me.tablexa.mahuyenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'mahuyen' in table 'Xa' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablexa.mahuyenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property maxa() As String
            Get
                Try 
                    Return CType(Me(Me.tablexa.maxaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'maxa' in table 'Xa' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablexa.maxaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tenxa() As String
            Get
                Try 
                    Return CType(Me(Me.tablexa.tenxaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tenxa' in table 'Xa' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablexa.tenxaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tenxa_en() As String
            Get
                Try 
                    Return CType(Me(Me.tablexa.tenxa_enColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tenxa_en' in table 'Xa' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablexa.tenxa_enColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmahuyenNull() As Boolean
            Return Me.IsNull(Me.tablexa.mahuyenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmahuyenNull()
            Me(Me.tablexa.mahuyenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmaxaNull() As Boolean
            Return Me.IsNull(Me.tablexa.maxaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmaxaNull()
            Me(Me.tablexa.maxaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstenxaNull() As Boolean
            Return Me.IsNull(Me.tablexa.tenxaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettenxaNull()
            Me(Me.tablexa.tenxaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istenxa_enNull() As Boolean
            Return Me.IsNull(Me.tablexa.tenxa_enColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settenxa_enNull()
            Me(Me.tablexa.tenxa_enColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TinhRow
        Inherits Global.System.Data.DataRow
        
        Private tableTinh As TinhDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTinh = CType(Me.Table,TinhDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property matinh() As String
            Get
                Try 
                    Return CType(Me(Me.tableTinh.matinhColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'matinh' in table 'Tinh' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTinh.matinhColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tentinh() As String
            Get
                Try 
                    Return CType(Me(Me.tableTinh.tentinhColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tentinh' in table 'Tinh' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTinh.tentinhColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tentinh_en() As String
            Get
                Try 
                    Return CType(Me(Me.tableTinh.tentinh_enColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tentinh_en' in table 'Tinh' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTinh.tentinh_enColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmatinhNull() As Boolean
            Return Me.IsNull(Me.tableTinh.matinhColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmatinhNull()
            Me(Me.tableTinh.matinhColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstentinhNull() As Boolean
            Return Me.IsNull(Me.tableTinh.tentinhColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettentinhNull()
            Me(Me.tableTinh.tentinhColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istentinh_enNull() As Boolean
            Return Me.IsNull(Me.tableTinh.tentinh_enColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settentinh_enNull()
            Me(Me.tableTinh.tentinh_enColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DatasharingRow
        Inherits Global.System.Data.DataRow
        
        Private tableDatasharing As DatasharingDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDatasharing = CType(Me.Table,DatasharingDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property madt() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatasharing.madtColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'madt' in table 'Datasharing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatasharing.madtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tendt_vi() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatasharing.tendt_viColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tendt_vi' in table 'Datasharing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatasharing.tendt_viColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tendt_en() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatasharing.tendt_enColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tendt_en' in table 'Datasharing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatasharing.tendt_enColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property geoservername() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatasharing.geoservernameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'geoservername' in table 'Datasharing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatasharing.geoservernameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property chiso() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatasharing.chisoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'chiso' in table 'Datasharing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatasharing.chisoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tinh() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatasharing.tinhColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tinh' in table 'Datasharing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatasharing.tinhColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property huyen() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatasharing.huyenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'huyen' in table 'Datasharing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatasharing.huyenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property xa() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatasharing.xaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'xa' in table 'Datasharing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatasharing.xaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmadtNull() As Boolean
            Return Me.IsNull(Me.tableDatasharing.madtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmadtNull()
            Me(Me.tableDatasharing.madtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istendt_viNull() As Boolean
            Return Me.IsNull(Me.tableDatasharing.tendt_viColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settendt_viNull()
            Me(Me.tableDatasharing.tendt_viColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istendt_enNull() As Boolean
            Return Me.IsNull(Me.tableDatasharing.tendt_enColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settendt_enNull()
            Me(Me.tableDatasharing.tendt_enColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgeoservernameNull() As Boolean
            Return Me.IsNull(Me.tableDatasharing.geoservernameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgeoservernameNull()
            Me(Me.tableDatasharing.geoservernameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IschisoNull() As Boolean
            Return Me.IsNull(Me.tableDatasharing.chisoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetchisoNull()
            Me(Me.tableDatasharing.chisoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstinhNull() As Boolean
            Return Me.IsNull(Me.tableDatasharing.tinhColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettinhNull()
            Me(Me.tableDatasharing.tinhColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IshuyenNull() As Boolean
            Return Me.IsNull(Me.tableDatasharing.huyenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SethuyenNull()
            Me(Me.tableDatasharing.huyenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsxaNull() As Boolean
            Return Me.IsNull(Me.tableDatasharing.xaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetxaNull()
            Me(Me.tableDatasharing.xaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ThongtinRow
        Inherits Global.System.Data.DataRow
        
        Private tableThongtin As ThongtinDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableThongtin = CType(Me.Table,ThongtinDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property hoten() As String
            Get
                Try 
                    Return CType(Me(Me.tableThongtin.hotenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'hoten' in table 'Thongtin' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThongtin.hotenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property socmnd() As String
            Get
                Try 
                    Return CType(Me(Me.tableThongtin.socmndColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'socmnd' in table 'Thongtin' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThongtin.socmndColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ngaycap() As String
            Get
                Try 
                    Return CType(Me(Me.tableThongtin.ngaycapColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ngaycap' in table 'Thongtin' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThongtin.ngaycapColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property noicap() As String
            Get
                Try 
                    Return CType(Me(Me.tableThongtin.noicapColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'noicap' in table 'Thongtin' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThongtin.noicapColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property gioitinh() As String
            Get
                Try 
                    Return CType(Me(Me.tableThongtin.gioitinhColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'gioitinh' in table 'Thongtin' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThongtin.gioitinhColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tochuc() As String
            Get
                Try 
                    Return CType(Me(Me.tableThongtin.tochucColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tochuc' in table 'Thongtin' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThongtin.tochucColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property diachi() As String
            Get
                Try 
                    Return CType(Me(Me.tableThongtin.diachiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'diachi' in table 'Thongtin' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThongtin.diachiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dienthoai() As String
            Get
                Try 
                    Return CType(Me(Me.tableThongtin.dienthoaiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dienthoai' in table 'Thongtin' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThongtin.dienthoaiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property email() As String
            Get
                Try 
                    Return CType(Me(Me.tableThongtin.emailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'email' in table 'Thongtin' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThongtin.emailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property mucdich() As String
            Get
                Try 
                    Return CType(Me(Me.tableThongtin.mucdichColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'mucdich' in table 'Thongtin' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableThongtin.mucdichColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IshotenNull() As Boolean
            Return Me.IsNull(Me.tableThongtin.hotenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SethotenNull()
            Me(Me.tableThongtin.hotenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssocmndNull() As Boolean
            Return Me.IsNull(Me.tableThongtin.socmndColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsocmndNull()
            Me(Me.tableThongtin.socmndColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsngaycapNull() As Boolean
            Return Me.IsNull(Me.tableThongtin.ngaycapColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetngaycapNull()
            Me(Me.tableThongtin.ngaycapColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnoicapNull() As Boolean
            Return Me.IsNull(Me.tableThongtin.noicapColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnoicapNull()
            Me(Me.tableThongtin.noicapColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgioitinhNull() As Boolean
            Return Me.IsNull(Me.tableThongtin.gioitinhColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgioitinhNull()
            Me(Me.tableThongtin.gioitinhColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstochucNull() As Boolean
            Return Me.IsNull(Me.tableThongtin.tochucColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettochucNull()
            Me(Me.tableThongtin.tochucColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdiachiNull() As Boolean
            Return Me.IsNull(Me.tableThongtin.diachiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdiachiNull()
            Me(Me.tableThongtin.diachiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdienthoaiNull() As Boolean
            Return Me.IsNull(Me.tableThongtin.dienthoaiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdienthoaiNull()
            Me(Me.tableThongtin.dienthoaiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsemailNull() As Boolean
            Return Me.IsNull(Me.tableThongtin.emailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetemailNull()
            Me(Me.tableThongtin.emailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmucdichNull() As Boolean
            Return Me.IsNull(Me.tableThongtin.mucdichColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmucdichNull()
            Me(Me.tableThongtin.mucdichColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class lang_enRow
        Inherits Global.System.Data.DataRow
        
        Private tablelang_en As lang_enDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablelang_en = CType(Me.Table,lang_enDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_hoten() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_en.lab_hotenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_hoten' in table 'lang_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_en.lab_hotenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_cmnd() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_en.lab_cmndColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_cmnd' in table 'lang_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_en.lab_cmndColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_ngaycap() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_en.lab_ngaycapColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_ngaycap' in table 'lang_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_en.lab_ngaycapColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_noicap() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_en.lab_noicapColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_noicap' in table 'lang_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_en.lab_noicapColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_gioitinh() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_en.lab_gioitinhColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_gioitinh' in table 'lang_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_en.lab_gioitinhColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_tochuc() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_en.lab_tochucColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_tochuc' in table 'lang_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_en.lab_tochucColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_diachi() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_en.lab_diachiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_diachi' in table 'lang_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_en.lab_diachiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_dienthoai() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_en.lab_dienthoaiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_dienthoai' in table 'lang_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_en.lab_dienthoaiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_email() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_en.lab_emailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_email' in table 'lang_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_en.lab_emailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_mucdich() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_en.lab_mucdichColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_mucdich' in table 'lang_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_en.lab_mucdichColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cmdLuuThongTin() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_en.cmdLuuThongTinColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cmdLuuThongTin' in table 'lang_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_en.cmdLuuThongTinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CmdNapthongtin() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_en.CmdNapthongtinColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CmdNapthongtin' in table 'lang_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_en.CmdNapthongtinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CmdNext1() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_en.CmdNext1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CmdNext1' in table 'lang_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_en.CmdNext1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_redpoint() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_en.lab_redpointColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_redpoint' in table 'lang_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_en.lab_redpointColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Group_1() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_en.Group_1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Group_1' in table 'lang_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_en.Group_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_hotenNull() As Boolean
            Return Me.IsNull(Me.tablelang_en.lab_hotenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_hotenNull()
            Me(Me.tablelang_en.lab_hotenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_cmndNull() As Boolean
            Return Me.IsNull(Me.tablelang_en.lab_cmndColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_cmndNull()
            Me(Me.tablelang_en.lab_cmndColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_ngaycapNull() As Boolean
            Return Me.IsNull(Me.tablelang_en.lab_ngaycapColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_ngaycapNull()
            Me(Me.tablelang_en.lab_ngaycapColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_noicapNull() As Boolean
            Return Me.IsNull(Me.tablelang_en.lab_noicapColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_noicapNull()
            Me(Me.tablelang_en.lab_noicapColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_gioitinhNull() As Boolean
            Return Me.IsNull(Me.tablelang_en.lab_gioitinhColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_gioitinhNull()
            Me(Me.tablelang_en.lab_gioitinhColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_tochucNull() As Boolean
            Return Me.IsNull(Me.tablelang_en.lab_tochucColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_tochucNull()
            Me(Me.tablelang_en.lab_tochucColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_diachiNull() As Boolean
            Return Me.IsNull(Me.tablelang_en.lab_diachiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_diachiNull()
            Me(Me.tablelang_en.lab_diachiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_dienthoaiNull() As Boolean
            Return Me.IsNull(Me.tablelang_en.lab_dienthoaiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_dienthoaiNull()
            Me(Me.tablelang_en.lab_dienthoaiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_emailNull() As Boolean
            Return Me.IsNull(Me.tablelang_en.lab_emailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_emailNull()
            Me(Me.tablelang_en.lab_emailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_mucdichNull() As Boolean
            Return Me.IsNull(Me.tablelang_en.lab_mucdichColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_mucdichNull()
            Me(Me.tablelang_en.lab_mucdichColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscmdLuuThongTinNull() As Boolean
            Return Me.IsNull(Me.tablelang_en.cmdLuuThongTinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcmdLuuThongTinNull()
            Me(Me.tablelang_en.cmdLuuThongTinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCmdNapthongtinNull() As Boolean
            Return Me.IsNull(Me.tablelang_en.CmdNapthongtinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCmdNapthongtinNull()
            Me(Me.tablelang_en.CmdNapthongtinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCmdNext1Null() As Boolean
            Return Me.IsNull(Me.tablelang_en.CmdNext1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCmdNext1Null()
            Me(Me.tablelang_en.CmdNext1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_redpointNull() As Boolean
            Return Me.IsNull(Me.tablelang_en.lab_redpointColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_redpointNull()
            Me(Me.tablelang_en.lab_redpointColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGroup_1Null() As Boolean
            Return Me.IsNull(Me.tablelang_en.Group_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGroup_1Null()
            Me(Me.tablelang_en.Group_1Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class lang_viRow
        Inherits Global.System.Data.DataRow
        
        Private tablelang_vi As lang_viDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablelang_vi = CType(Me.Table,lang_viDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_hoten() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_vi.lab_hotenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_hoten' in table 'lang_vi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_vi.lab_hotenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_cmnd() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_vi.lab_cmndColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_cmnd' in table 'lang_vi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_vi.lab_cmndColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_ngaycap() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_vi.lab_ngaycapColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_ngaycap' in table 'lang_vi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_vi.lab_ngaycapColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_noicap() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_vi.lab_noicapColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_noicap' in table 'lang_vi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_vi.lab_noicapColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_gioitinh() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_vi.lab_gioitinhColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_gioitinh' in table 'lang_vi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_vi.lab_gioitinhColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_tochuc() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_vi.lab_tochucColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_tochuc' in table 'lang_vi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_vi.lab_tochucColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_diachi() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_vi.lab_diachiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_diachi' in table 'lang_vi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_vi.lab_diachiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_dienthoai() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_vi.lab_dienthoaiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_dienthoai' in table 'lang_vi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_vi.lab_dienthoaiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_email() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_vi.lab_emailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_email' in table 'lang_vi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_vi.lab_emailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_mucdich() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_vi.lab_mucdichColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_mucdich' in table 'lang_vi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_vi.lab_mucdichColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cmdLuuThongTin() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_vi.cmdLuuThongTinColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cmdLuuThongTin' in table 'lang_vi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_vi.cmdLuuThongTinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CmdNapthongtin() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_vi.CmdNapthongtinColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CmdNapthongtin' in table 'lang_vi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_vi.CmdNapthongtinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CmdNext1() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_vi.CmdNext1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CmdNext1' in table 'lang_vi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_vi.CmdNext1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_redpoint() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_vi.lab_redpointColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_redpoint' in table 'lang_vi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_vi.lab_redpointColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Group_1() As String
            Get
                Try 
                    Return CType(Me(Me.tablelang_vi.Group_1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Group_1' in table 'lang_vi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelang_vi.Group_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_hotenNull() As Boolean
            Return Me.IsNull(Me.tablelang_vi.lab_hotenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_hotenNull()
            Me(Me.tablelang_vi.lab_hotenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_cmndNull() As Boolean
            Return Me.IsNull(Me.tablelang_vi.lab_cmndColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_cmndNull()
            Me(Me.tablelang_vi.lab_cmndColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_ngaycapNull() As Boolean
            Return Me.IsNull(Me.tablelang_vi.lab_ngaycapColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_ngaycapNull()
            Me(Me.tablelang_vi.lab_ngaycapColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_noicapNull() As Boolean
            Return Me.IsNull(Me.tablelang_vi.lab_noicapColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_noicapNull()
            Me(Me.tablelang_vi.lab_noicapColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_gioitinhNull() As Boolean
            Return Me.IsNull(Me.tablelang_vi.lab_gioitinhColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_gioitinhNull()
            Me(Me.tablelang_vi.lab_gioitinhColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_tochucNull() As Boolean
            Return Me.IsNull(Me.tablelang_vi.lab_tochucColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_tochucNull()
            Me(Me.tablelang_vi.lab_tochucColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_diachiNull() As Boolean
            Return Me.IsNull(Me.tablelang_vi.lab_diachiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_diachiNull()
            Me(Me.tablelang_vi.lab_diachiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_dienthoaiNull() As Boolean
            Return Me.IsNull(Me.tablelang_vi.lab_dienthoaiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_dienthoaiNull()
            Me(Me.tablelang_vi.lab_dienthoaiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_emailNull() As Boolean
            Return Me.IsNull(Me.tablelang_vi.lab_emailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_emailNull()
            Me(Me.tablelang_vi.lab_emailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_mucdichNull() As Boolean
            Return Me.IsNull(Me.tablelang_vi.lab_mucdichColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_mucdichNull()
            Me(Me.tablelang_vi.lab_mucdichColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscmdLuuThongTinNull() As Boolean
            Return Me.IsNull(Me.tablelang_vi.cmdLuuThongTinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcmdLuuThongTinNull()
            Me(Me.tablelang_vi.cmdLuuThongTinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCmdNapthongtinNull() As Boolean
            Return Me.IsNull(Me.tablelang_vi.CmdNapthongtinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCmdNapthongtinNull()
            Me(Me.tablelang_vi.CmdNapthongtinColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCmdNext1Null() As Boolean
            Return Me.IsNull(Me.tablelang_vi.CmdNext1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCmdNext1Null()
            Me(Me.tablelang_vi.CmdNext1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_redpointNull() As Boolean
            Return Me.IsNull(Me.tablelang_vi.lab_redpointColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_redpointNull()
            Me(Me.tablelang_vi.lab_redpointColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGroup_1Null() As Boolean
            Return Me.IsNull(Me.tablelang_vi.Group_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGroup_1Null()
            Me(Me.tablelang_vi.Group_1Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tochucRow
        Inherits Global.System.Data.DataRow
        
        Private tabletochuc As tochucDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletochuc = CType(Me.Table,tochucDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tentc_vi() As String
            Get
                Try 
                    Return CType(Me(Me.tabletochuc.tentc_viColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tentc_vi' in table 'tochuc' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletochuc.tentc_viColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tentc_en() As String
            Get
                Try 
                    Return CType(Me(Me.tabletochuc.tentc_enColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tentc_en' in table 'tochuc' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletochuc.tentc_enColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istentc_viNull() As Boolean
            Return Me.IsNull(Me.tabletochuc.tentc_viColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settentc_viNull()
            Me(Me.tabletochuc.tentc_viColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istentc_enNull() As Boolean
            Return Me.IsNull(Me.tabletochuc.tentc_enColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settentc_enNull()
            Me(Me.tabletochuc.tentc_enColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class taive_enRow
        Inherits Global.System.Data.DataRow
        
        Private tabletaive_en As taive_enDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletaive_en = CType(Me.Table,taive_enDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Group_3() As String
            Get
                Try 
                    Return CType(Me(Me.tabletaive_en.Group_3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Group_3' in table 'taive_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletaive_en.Group_3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property group_hanhchinh() As String
            Get
                Try 
                    Return CType(Me(Me.tabletaive_en.group_hanhchinhColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'group_hanhchinh' in table 'taive_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletaive_en.group_hanhchinhColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Group_chiso() As String
            Get
                Try 
                    Return CType(Me(Me.tabletaive_en.Group_chisoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Group_chiso' in table 'taive_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletaive_en.Group_chisoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Group_shapefile() As String
            Get
                Try 
                    Return CType(Me(Me.tabletaive_en.Group_shapefileColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Group_shapefile' in table 'taive_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletaive_en.Group_shapefileColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CmdHuy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletaive_en.CmdHuyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CmdHuy' in table 'taive_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletaive_en.CmdHuyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cmdTaiVe() As String
            Get
                Try 
                    Return CType(Me(Me.tabletaive_en.cmdTaiVeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cmdTaiVe' in table 'taive_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletaive_en.cmdTaiVeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CmdCSVFile() As String
            Get
                Try 
                    Return CType(Me(Me.tabletaive_en.CmdCSVFileColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CmdCSVFile' in table 'taive_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletaive_en.CmdCSVFileColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_chonDL() As String
            Get
                Try 
                    Return CType(Me(Me.tabletaive_en.lab_chonDLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_chonDL' in table 'taive_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletaive_en.lab_chonDLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_tinh() As String
            Get
                Try 
                    Return CType(Me(Me.tabletaive_en.lab_tinhColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_tinh' in table 'taive_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletaive_en.lab_tinhColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_huyen() As String
            Get
                Try 
                    Return CType(Me(Me.tabletaive_en.lab_huyenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_huyen' in table 'taive_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletaive_en.lab_huyenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_xa() As String
            Get
                Try 
                    Return CType(Me(Me.tabletaive_en.lab_xaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_xa' in table 'taive_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletaive_en.lab_xaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property chk_all() As String
            Get
                Try 
                    Return CType(Me(Me.tabletaive_en.chk_allColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'chk_all' in table 'taive_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletaive_en.chk_allColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CmdThayDoi() As String
            Get
                Try 
                    Return CType(Me(Me.tabletaive_en.CmdThayDoiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CmdThayDoi' in table 'taive_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletaive_en.CmdThayDoiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Group_nam() As String
            Get
                Try 
                    Return CType(Me(Me.tabletaive_en.Group_namColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Group_nam' in table 'taive_en' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletaive_en.Group_namColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGroup_3Null() As Boolean
            Return Me.IsNull(Me.tabletaive_en.Group_3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGroup_3Null()
            Me(Me.tabletaive_en.Group_3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isgroup_hanhchinhNull() As Boolean
            Return Me.IsNull(Me.tabletaive_en.group_hanhchinhColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setgroup_hanhchinhNull()
            Me(Me.tabletaive_en.group_hanhchinhColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGroup_chisoNull() As Boolean
            Return Me.IsNull(Me.tabletaive_en.Group_chisoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGroup_chisoNull()
            Me(Me.tabletaive_en.Group_chisoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGroup_shapefileNull() As Boolean
            Return Me.IsNull(Me.tabletaive_en.Group_shapefileColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGroup_shapefileNull()
            Me(Me.tabletaive_en.Group_shapefileColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCmdHuyNull() As Boolean
            Return Me.IsNull(Me.tabletaive_en.CmdHuyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCmdHuyNull()
            Me(Me.tabletaive_en.CmdHuyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscmdTaiVeNull() As Boolean
            Return Me.IsNull(Me.tabletaive_en.cmdTaiVeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcmdTaiVeNull()
            Me(Me.tabletaive_en.cmdTaiVeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCmdCSVFileNull() As Boolean
            Return Me.IsNull(Me.tabletaive_en.CmdCSVFileColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCmdCSVFileNull()
            Me(Me.tabletaive_en.CmdCSVFileColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_chonDLNull() As Boolean
            Return Me.IsNull(Me.tabletaive_en.lab_chonDLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_chonDLNull()
            Me(Me.tabletaive_en.lab_chonDLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_tinhNull() As Boolean
            Return Me.IsNull(Me.tabletaive_en.lab_tinhColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_tinhNull()
            Me(Me.tabletaive_en.lab_tinhColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_huyenNull() As Boolean
            Return Me.IsNull(Me.tabletaive_en.lab_huyenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_huyenNull()
            Me(Me.tabletaive_en.lab_huyenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_xaNull() As Boolean
            Return Me.IsNull(Me.tabletaive_en.lab_xaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_xaNull()
            Me(Me.tabletaive_en.lab_xaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ischk_allNull() As Boolean
            Return Me.IsNull(Me.tabletaive_en.chk_allColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setchk_allNull()
            Me(Me.tabletaive_en.chk_allColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCmdThayDoiNull() As Boolean
            Return Me.IsNull(Me.tabletaive_en.CmdThayDoiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCmdThayDoiNull()
            Me(Me.tabletaive_en.CmdThayDoiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGroup_namNull() As Boolean
            Return Me.IsNull(Me.tabletaive_en.Group_namColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGroup_namNull()
            Me(Me.tabletaive_en.Group_namColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class taive_viRow
        Inherits Global.System.Data.DataRow
        
        Private tabletaive_vi As taive_viDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletaive_vi = CType(Me.Table,taive_viDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Group_3() As String
            Get
                Try 
                    Return CType(Me(Me.tabletaive_vi.Group_3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Group_3' in table 'taive_vi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletaive_vi.Group_3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property group_hanhchinh() As String
            Get
                Try 
                    Return CType(Me(Me.tabletaive_vi.group_hanhchinhColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'group_hanhchinh' in table 'taive_vi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletaive_vi.group_hanhchinhColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Group_chiso() As String
            Get
                Try 
                    Return CType(Me(Me.tabletaive_vi.Group_chisoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Group_chiso' in table 'taive_vi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletaive_vi.Group_chisoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Group_shapefile() As String
            Get
                Try 
                    Return CType(Me(Me.tabletaive_vi.Group_shapefileColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Group_shapefile' in table 'taive_vi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletaive_vi.Group_shapefileColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CmdHuy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletaive_vi.CmdHuyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CmdHuy' in table 'taive_vi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletaive_vi.CmdHuyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cmdTaiVe() As String
            Get
                Try 
                    Return CType(Me(Me.tabletaive_vi.cmdTaiVeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cmdTaiVe' in table 'taive_vi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletaive_vi.cmdTaiVeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CmdCSVFile() As String
            Get
                Try 
                    Return CType(Me(Me.tabletaive_vi.CmdCSVFileColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CmdCSVFile' in table 'taive_vi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletaive_vi.CmdCSVFileColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_chonDL() As String
            Get
                Try 
                    Return CType(Me(Me.tabletaive_vi.lab_chonDLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_chonDL' in table 'taive_vi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletaive_vi.lab_chonDLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_tinh() As String
            Get
                Try 
                    Return CType(Me(Me.tabletaive_vi.lab_tinhColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_tinh' in table 'taive_vi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletaive_vi.lab_tinhColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_huyen() As String
            Get
                Try 
                    Return CType(Me(Me.tabletaive_vi.lab_huyenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_huyen' in table 'taive_vi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletaive_vi.lab_huyenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lab_xa() As String
            Get
                Try 
                    Return CType(Me(Me.tabletaive_vi.lab_xaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lab_xa' in table 'taive_vi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletaive_vi.lab_xaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property chk_all() As String
            Get
                Try 
                    Return CType(Me(Me.tabletaive_vi.chk_allColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'chk_all' in table 'taive_vi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletaive_vi.chk_allColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CmdThayDoi() As String
            Get
                Try 
                    Return CType(Me(Me.tabletaive_vi.CmdThayDoiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CmdThayDoi' in table 'taive_vi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletaive_vi.CmdThayDoiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Group_nam() As String
            Get
                Try 
                    Return CType(Me(Me.tabletaive_vi.Group_namColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Group_nam' in table 'taive_vi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletaive_vi.Group_namColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGroup_3Null() As Boolean
            Return Me.IsNull(Me.tabletaive_vi.Group_3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGroup_3Null()
            Me(Me.tabletaive_vi.Group_3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isgroup_hanhchinhNull() As Boolean
            Return Me.IsNull(Me.tabletaive_vi.group_hanhchinhColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setgroup_hanhchinhNull()
            Me(Me.tabletaive_vi.group_hanhchinhColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGroup_chisoNull() As Boolean
            Return Me.IsNull(Me.tabletaive_vi.Group_chisoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGroup_chisoNull()
            Me(Me.tabletaive_vi.Group_chisoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGroup_shapefileNull() As Boolean
            Return Me.IsNull(Me.tabletaive_vi.Group_shapefileColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGroup_shapefileNull()
            Me(Me.tabletaive_vi.Group_shapefileColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCmdHuyNull() As Boolean
            Return Me.IsNull(Me.tabletaive_vi.CmdHuyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCmdHuyNull()
            Me(Me.tabletaive_vi.CmdHuyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscmdTaiVeNull() As Boolean
            Return Me.IsNull(Me.tabletaive_vi.cmdTaiVeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcmdTaiVeNull()
            Me(Me.tabletaive_vi.cmdTaiVeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCmdCSVFileNull() As Boolean
            Return Me.IsNull(Me.tabletaive_vi.CmdCSVFileColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCmdCSVFileNull()
            Me(Me.tabletaive_vi.CmdCSVFileColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_chonDLNull() As Boolean
            Return Me.IsNull(Me.tabletaive_vi.lab_chonDLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_chonDLNull()
            Me(Me.tabletaive_vi.lab_chonDLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_tinhNull() As Boolean
            Return Me.IsNull(Me.tabletaive_vi.lab_tinhColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_tinhNull()
            Me(Me.tabletaive_vi.lab_tinhColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_huyenNull() As Boolean
            Return Me.IsNull(Me.tabletaive_vi.lab_huyenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_huyenNull()
            Me(Me.tabletaive_vi.lab_huyenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Islab_xaNull() As Boolean
            Return Me.IsNull(Me.tabletaive_vi.lab_xaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setlab_xaNull()
            Me(Me.tabletaive_vi.lab_xaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ischk_allNull() As Boolean
            Return Me.IsNull(Me.tabletaive_vi.chk_allColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setchk_allNull()
            Me(Me.tabletaive_vi.chk_allColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCmdThayDoiNull() As Boolean
            Return Me.IsNull(Me.tabletaive_vi.CmdThayDoiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCmdThayDoiNull()
            Me(Me.tabletaive_vi.CmdThayDoiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGroup_namNull() As Boolean
            Return Me.IsNull(Me.tabletaive_vi.Group_namColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGroup_namNull()
            Me(Me.tabletaive_vi.Group_namColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TruongRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TruongRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TruongRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TruongRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class huyenRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As huyenRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As huyenRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As huyenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class xaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As xaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As xaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As xaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TinhRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TinhRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TinhRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TinhRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DatasharingRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DatasharingRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DatasharingRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DatasharingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ThongtinRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ThongtinRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ThongtinRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ThongtinRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class lang_enRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As lang_enRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As lang_enRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As lang_enRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class lang_viRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As lang_viRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As lang_viRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As lang_viRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tochucRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tochucRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tochucRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tochucRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class taive_enRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As taive_enRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As taive_enRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As taive_enRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class taive_viRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As taive_viRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As taive_viRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As taive_viRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
